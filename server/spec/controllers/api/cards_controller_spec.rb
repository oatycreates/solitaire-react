require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe Api::CardsController, type: :controller do
  let(:card) { FactoryGirl.build(:card) }

  # This should return the minimal set of attributes required to create a valid
  # Card. As you add validations to Card, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    FactoryGirl.attributes_for(:card)
  }

  let(:invalid_attributes) {
    { face_value: -9999 }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # CardsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    before(:each) do
      # Create a a card to work with and persist to the test database
      card.save!
      card.reload
    end

    it "assigns all cards as @cards" do
      get :index, params: {}, session: valid_session, format: "json"
      expect(assigns(:cards)).to eq([card])
    end
  end

  describe "GET #show" do
    before(:each) do
      # Create a a card to work with and persist to the test database
      card.save!
      card.reload
    end

    it "assigns the requested card as @card" do
      get :show, params: {id: card.to_param}, session: valid_session, format: "json"
      expect(assigns(:card)).to eq(card)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Card" do
        expect {
          post :create, params: {card: valid_attributes}, session: valid_session, format: "json"
        }.to change(Card, :count).by(1)
      end

      it "assigns a newly created card as @card" do
        post :create, params: {card: valid_attributes}, session: valid_session, format: "json"
        expect(assigns(:card)).to be_a(Card)
        expect(assigns(:card)).to be_persisted
      end

      it "returns the created card as the response body" do
        post :create, params: {card: valid_attributes}, session: valid_session, format: "json"
        new_card = assigns(:card)
        expect(response.body).to eq(new_card.to_json)
      end

      it "returns a successful response" do
        post :create, params: {card: valid_attributes}, session: valid_session, format: "json"
        expect(response).to be_success
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved card as @card" do
        post :create, params: {card: invalid_attributes}, session: valid_session, format: "json"
        expect(assigns(:card)).to be_a_new(Card)
      end

      it "returns an error response" do
        post :create, params: {card: invalid_attributes}, session: valid_session, format: "json"
        expect(response.status).to eq(Rack::Utils::SYMBOL_TO_STATUS_CODE[:unprocessable_entity])
      end
    end
  end

  describe "PUT #update" do
    before(:each) do
      # Create a a card to work with and persist to the test database
      card.save!
      card.reload
    end

    context "with valid params" do
      let(:new_face_value) {
        [*0..13].sample
      }
      let(:new_attributes) {
        { face_value: new_face_value }
      }

      it "updates the requested card" do
        put :update, params: {id: card.to_param, card: new_attributes}, session: valid_session, format: "json"
        card.reload
        expect(card.face_value).to eq(new_face_value)
      end

      it "assigns the requested card as @card" do
        put :update, params: {id: card.to_param, card: valid_attributes}, session: valid_session, format: "json"
        expect(assigns(:card)).to eq(card)
      end

      it "returns a successful response" do
        put :update, params: {id: card.to_param, card: valid_attributes}, session: valid_session, format: "json"
        expect(response).to be_success
      end
    end

    context "with invalid params" do
      it "assigns the card as @card" do
        put :update, params: {id: card.to_param, card: invalid_attributes}, session: valid_session, format: "json"
        expect(assigns(:card)).to eq(card)
      end

      it "returns an error response" do
        put :update, params: {id: card.to_param, card: invalid_attributes}, session: valid_session, format: "json"
        expect(response.status).to eq(Rack::Utils::SYMBOL_TO_STATUS_CODE[:unprocessable_entity])
      end
    end
  end

  describe "DELETE #destroy" do
    before(:each) do
      # Create a a card to work with and persist to the test database
      card.save!
      card.reload
    end

    it "destroys the requested card" do
      expect {
        delete :destroy, params: {id: card.to_param}, session: valid_session, format: "json"
      }.to change(Card, :count).by(-1)
    end

    it "returns a successful response" do
      delete :destroy, params: {id: card.to_param}, session: valid_session, format: "json"
      expect(response).to be_success
    end
  end

  describe "POST #attach_to_card" do
    let(:card) { FactoryGirl.create(:card) }
    let(:new_parent_card) { FactoryGirl.create(:card) }

    it "attaches to the new card" do
      post :attach_to_card, params: {id: card.to_param, parent_card_id: new_parent_card.to_param}, session: valid_session, format: "json"
      card.reload
      expect(card.parent_card).to eq(new_parent_card)
    end

    context "with an invalid parent_card_id" do
      let(:invalid_parent_card_id) { 99999 }

      it "returns an error response" do
        post :attach_to_card, params: {id: card.to_param, parent_card_id: invalid_parent_card_id}, session: valid_session, format: "json"
        card.reload
        expect(response.status).to eq(Rack::Utils::SYMBOL_TO_STATUS_CODE[:unprocessable_entity])
      end

      it "keeps the original parent_card" do
        original_parent_card = card.parent_card
        post :attach_to_card, params: {id: card.to_param, parent_card_id: invalid_parent_card_id}, session: valid_session, format: "json"
        card.reload
        expect(card.parent_card).to eq(original_parent_card)
      end
    end
  end
end
