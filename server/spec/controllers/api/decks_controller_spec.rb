require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe Api::DecksController, type: :controller do
  let(:deck) { FactoryGirl.build(:deck_with_cards) }

  # This should return the minimal set of attributes required to create a valid
  # Deck. As you add validations to Deck, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    FactoryGirl.attributes_for(:deck).merge({
      cards_attributes: FactoryGirl.attributes_for_list(:card, 56)
    })
  }

  let(:invalid_attributes) {
    # 28/10/2016: There is presently no way to make an invalid deck
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # DecksController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    before(:each) do
      # Create a a deck to work with and persist to the test database
      deck.save!
      deck.reload
    end

    it "assigns all decks as @decks" do
      get :index, params: {}, session: valid_session, format: "json"
      expect(assigns(:decks)).to eq([deck])
    end
  end

  describe "GET #show" do
    before(:each) do
      # Create a a deck to work with and persist to the test database
      deck.save!
      deck.reload
    end

    it "assigns the requested deck as @deck" do
      get :show, params: {id: deck.to_param}, session: valid_session, format: "json"
      expect(assigns(:deck)).to eq(deck)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Deck" do
        expect {
          post :create, params: {deck: valid_attributes}, session: valid_session, format: "json"
        }.to change(Deck, :count).by(1)
      end

      it "assigns a newly created deck as @deck" do
        post :create, params: {deck: valid_attributes}, session: valid_session, format: "json"
        expect(assigns(:deck)).to be_a(Deck)
        expect(assigns(:deck)).to be_persisted
      end

      it "returns the created deck as the response body" do
        post :create, params: {deck: valid_attributes}, session: valid_session, format: "json"
        new_deck = assigns(:deck)
        expect(response.body).to eq(new_deck.to_json)
      end

      it "returns a successful response" do
        post :create, params: {deck: valid_attributes}, session: valid_session, format: "json"
        expect(response).to be_success
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved deck as @deck" do
        post :create, params: {deck: invalid_attributes}, session: valid_session, format: "json"
        expect(assigns(:deck)).to be_a_new(Deck)
      end

      it "returns an error response" do
        post :create, params: {deck: invalid_attributes}, session: valid_session, format: "json"
        expect(response.status).to eq(Rack::Utils::SYMBOL_TO_STATUS_CODE[:unprocessable_entity])
      end
    end
  end

  describe "PUT #update" do
    before(:each) do
      # Create a a deck to work with and persist to the test database
      deck.save!
      deck.reload
    end

    context "with valid params" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested deck" do
        put :update, params: {id: deck.to_param, deck: new_attributes}, session: valid_session, format: "json"
        deck.reload
        skip("Add assertions for updated state")
      end

      it "assigns the requested deck as @deck" do
        put :update, params: {id: deck.to_param, deck: valid_attributes}, session: valid_session, format: "json"
        expect(assigns(:deck)).to eq(deck)
      end

      it "returns a successful response" do
        put :update, params: {id: deck.to_param, deck: valid_attributes}, session: valid_session, format: "json"
        expect(response).to be_success
      end
    end

    context "with invalid params" do
      it "assigns the deck as @deck" do
        put :update, params: {id: deck.to_param, deck: invalid_attributes}, session: valid_session, format: "json"
        expect(assigns(:deck)).to eq(deck)
      end

      it "returns an error response" do
        put :update, params: {id: deck.to_param, deck: invalid_attributes}, session: valid_session, format: "json"
        expect(response.status).to eq(Rack::Utils::SYMBOL_TO_STATUS_CODE[:unprocessable_entity])
      end
    end
  end

  describe "DELETE #destroy" do
    before(:each) do
      # Create a a deck to work with and persist to the test database
      deck.save!
      deck.reload
    end

    it "destroys the requested deck" do
      expect {
        delete :destroy, params: {id: deck.to_param}, session: valid_session, format: "json"
      }.to change(Deck, :count).by(-1)
    end

    it "returns a successful response" do
      delete :destroy, params: {id: deck.to_param}, session: valid_session, format: "json"
      expect(response).to be_success
    end
  end
end
